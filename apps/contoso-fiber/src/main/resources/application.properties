## application name
spring.application.name=contoso-fiber

# Contoso Configuration
contoso.retry.demo=${CONTOSO_RETRY_DEMO}

## email, queue, demo-load, demo-dead-letter
contoso.suport-guide.request.service=${CONTOSO_SUPPORT_GUIDE_REQUEST_SERVICE}

## legacy, grpc
#contoso.supportguide.file.service=legacy

grpc.client.contoso-support-guide-file-service.address=${SUPPORT_GUIDE_URL}:443

# Spring Data JPA
spring.jpa.hibernate.ddl-auto=validate

# Azure AD
spring.cloud.azure.active-directory.enabled=true
spring.cloud.azure.active-directory.credential.client-id=${AZURE_ACTIVE_DIRECTORY_CREDENTIAL_CLIENT_ID}
spring.cloud.azure.active-directory.credential.client-secret=${AZURE_ACTIVE_DIRECTORY_CREDENTIAL_CLIENT_SECRET}
spring.cloud.azure.active-directory.profile.tenant-id=${AZURE_ACTIVE_DIRECTORY_TENANT_ID}

# Redis
spring.data.redis.host=${REDIS_HOST}
spring.data.redis.port=${REDIS_PORT}
spring.data.redis.password=${REDIS_PASSWORD}
spring.data.redis.ssl.enabled=true

# Spring Session to leverage Redis to back a web applicationâ€™s HttpSession
spring.session.redis.namespace=spring:session

# Spring Cloud Stream - Azure Service Bus
spring.cloud.function.definition=consumeemailresponse
spring.cloud.azure.servicebus.namespace=${AZURE_SERVICEBUS_NAMESPACE}
spring.cloud.stream.servicebus.bindings.produceemailrequest-out-0.producer.entity-type=queue
spring.cloud.stream.servicebus.bindings.consumeemailresponse-in-0.consumer.entity-type=queue
spring.cloud.stream.servicebus.bindings.consumeemailresponse-in-0.consumer.auto-complete: false
spring.cloud.stream.bindings.produceemailrequest-out-0.destination=${AZURE_SERVICEBUS_EMAIL_REQUEST_QUEUE_NAME}
spring.cloud.stream.bindings.consumeemailresponse-in-0.destination=${AZURE_SERVICEBUS_EMAIL_RESPONSE_QUEUE_NAME}

# Spring Cloud Azure Storage
spring.cloud.azure.storage.blob.account-name=${AZURE_STORAGE_ACCOUNT_NAME}
spring.cloud.azure.storage.blob.container-name=${AZURE_STORAGE_CONTAINER_NAME}

# Actuator
management.endpoints.web.exposure.include=metrics,health,info,retry,retryevents

#Circuit breaker
management.health.circuitbreakers.enabled: true
management.health.ratelimiters.enabled: false

#circuit breaker defaults
resilience4j.circuitbreaker.metrics.enabled=true
resilience4j.circuitbreaker.metrics.legacy.enabled=true
resilience4j.circuitbreaker.configs.default.registerHealthIndicator=true
resilience4j.circuitbreaker.configs.default.slidingWindowSize=10
resilience4j.circuitbreaker.configs.default.slidingWindowType=COUNT_BASED
resilience4j.circuitbreaker.configs.default.minimumNumberOfCalls=6
resilience4j.circuitbreaker.configs.default.permittedNumberOfCallsInHalfOpenState=3
resilience4j.circuitbreaker.configs.default.automaticTransitionFromOpenToHalfOpenEnabled=true
resilience4j.circuitbreaker.configs.default.waitDurationInOpenState=15s
resilience4j.circuitbreaker.configs.default.failureRateThreshold=50
resilience4j.circuitbreaker.configs.default.eventConsumerBufferSize=10


#circuit breaker retry config
resilience4j.retry.metrics.enabled=true
resilience4j.retry.metrics.legacy.enabled=true
resilience4j.retry.configs.default.maxAttempts=3
resilience4j.retry.configs.default.waitDuration=3s
resilience4j.retry.configs.default.retryExceptions[0]=org.springframework.web.client.HttpServerErrorException
resilience4j.retry.configs.default.retryExceptions[1]=java.lang.RuntimeException

#ServicePlan Circuit Breaker policy should use default config
resilience4j.circuitbreaker.instances.servicePlan.baseConfig=default

#ServicePlan retry policy should use default config
resilience4j.retry.instances.servicePlan.baseConfig=default
